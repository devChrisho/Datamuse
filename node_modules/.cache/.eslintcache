[{"/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/index.js":"1","/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/App.js":"2","/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/reportWebVitals.js":"3","/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/components/GlobalStyles.js":"4","/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/components/Input.js":"5"},{"size":553,"mtime":1617425713518,"results":"6","hashOfConfig":"7"},{"size":150,"mtime":1617425798273,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1617261475719,"results":"9","hashOfConfig":"7"},{"size":718,"mtime":1617589872176,"results":"10","hashOfConfig":"7"},{"size":3444,"mtime":1617624075206,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n455f3",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/index.js",[],"/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/App.js",[],"/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/reportWebVitals.js",[],"/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/components/GlobalStyles.js",[],"/Users/christopher/SynologyDrive/Coding/gitrepository/Datamuse/src/components/Input.js",["23"],"import axios from 'axios';\nimport styled from 'styled-components';\nimport { useRef, useState } from 'react';\n\nconst api = `https://api.datamuse.com/words?rel_rhy=`;\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #f07070;\n  width: 30%;\n  border-radius: 1rem;\n  padding: 5rem;\n  h1 {\n    font-family: 'Work Sans', sans-serif;\n    color: #4a3da0;\n    font-weight: 100;\n    font-size: 3.2rem;\n    margin-top: 2rem;\n    text-align: center;\n  }\n  input {\n    margin-top: 1rem;\n    height: 4rem;\n    font-size: 1.6rem;\n    background-color: rgba(255, 255, 255, 0.153);\n    text-align: center;\n    border-radius: 0.5rem;\n    border: 0.5px solid #4a3da0;\n    outline: none;\n    color: #4a3da0;\n\n    ::placeholder {\n      color: rgba(74, 61, 160, 0.517);\n    }\n  }\n\n  .hide {\n    display: none;\n  }\n`;\n\nconst StyledButton = styled.button`\n  padding: 1.6rem;\n  width: 40%;\n  color: white;\n  margin-top: 2rem;\n  background-color: #4a3da0;\n  outline: none;\n  border: 1px solid #4a3da0;\n  border-radius: 5rem;\n  font-size: 1.6rem;\n  font-weight: bold;\n  &:active {\n    background-color: rgba(74, 61, 160, 0.521);\n    transition: 0.1s all ease-in-out;\n  }\n`;\n\nconst StyledOutput = styled.div`\n  box-shadow: inset 5px 5px 8px rgba(0, 0, 0, 0.263),\n    inset -3px -3px 10px rgba(255, 255, 255, 0.201);\n  width: 100%;\n  margin-top: 2rem;\n  background-color: slategray;\n  border: 1 px solid darkblue;\n  color: white;\n  padding: 3rem;\n  font-size: 1.2rem;\n  border-radius: 0.5rem;\n  h2 {\n    span {\n      text-decoration: underline;\n      color: #80ffb7;\n    }\n  }\n`;\n\nconst StyledLi = styled.li`\n  font-size: 1.6rem;\n  margin-left: 2rem;\n  margin-top: 1rem;\n  padding-left: 1rem;\n`;\n\nconst Input = () => {\n  const [word, setWord] = useState('');\n  const [maxItems, setMaxItems] = useState(10);\n  const [results, setResults] = useState([]);\n  const [visibility, setVisibility] = useState(false);\n  const [spanText, setSpanText] = useState('');\n\n  const userInput = new useRef(null);\n\n  const buttonClickHandler = () => {\n    setVisibility(true);\n    findRhyme(word, maxItems);\n    setSpanText(word);\n  };\n\n  const inputKeyPress = e => {\n    if (e.key === 'Enter') {\n      setVisibility(true);\n      findRhyme(word, maxItems);\n      userInput.current.value = '';\n      setSpanText(word);\n      console.log(spanText);\n    } else {\n      setWord(e.target.value);\n    }\n  };\n\n  const findRhyme = async (userWord, userMaxItems) => {\n    const endpoint = api + userWord + '&max=' + userMaxItems;\n    const result = await axios(endpoint);\n    setResults(result.data);\n  };\n\n  const resultsList = results.map((item, key) => {\n    return (\n      <StyledLi key={key}>\n        {item.word} ({item.numSyllables} syll.)\n      </StyledLi>\n    );\n  });\n\n  return (\n    <StyledDiv>\n      <h1>Time to find a Rhyme </h1>\n      <input\n        type='text'\n        placeholder='type a word...'\n        autoCorrect='false'\n        autoComplete='false'\n        spellCheck='false'\n        ref={userInput}\n        onKeyUp={inputKeyPress}\n      ></input>\n      <StyledButton onClick={buttonClickHandler}>Find</StyledButton>\n      <StyledOutput className={visibility === true ? '' : 'hide'}>\n        <h2 className={visibility === true ? '' : 'hide'}>\n          Words that rhyme with <span>{spanText}</span>\n        </h2>\n        <ol>{resultsList}</ol>\n      </StyledOutput>\n    </StyledDiv>\n  );\n};\n\nexport default Input;\n",{"ruleId":"24","severity":1,"message":"25","line":89,"column":20,"nodeType":"26","messageId":"27","endLine":89,"endColumn":31},"no-unused-vars","'setMaxItems' is assigned a value but never used.","Identifier","unusedVar"]